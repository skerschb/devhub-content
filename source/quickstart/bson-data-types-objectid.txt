:template: devhub-article

.. ---------------------------------------------------------------
.. META FIELDS FOR SEO / SOCIAL
.. ---------------------------------------------------------------

.. meta-description::

   MongoDB provides an automatic unique identifier for the _id field in the form of an ObjectId data type.

.. twitter::
   :site: @mongodb
   :creator: @kenwalger
   :title: Quick Start: BSON Data Types - ObjectId
   :image: /images/objectid.png

   MongoDB provides an automatic unique identifier for the _id field in the form of an ObjectId data type.

.. ---------------------------------------------------------------
.. ARTICLE METADATA FIELDS (TO POPULATE FILTERS AND ARTICLE PAGE)
.. ---------------------------------------------------------------

.. include:: /includes/authors/alger-ken.rst

.. pubdate:: November 12, 2019

.. updated-date:: February 25, 2020

.. type:: quickstart

.. level:: beginner

.. tags::

   * BSON
   * ObjectId

.. atf-image:: /images/atf-images/qs-bson-header.jpg

.. related::

   * ``:doc:`Decimal128 </quickstart/bson-data-types-decimal128>```

.. ---------------------------------------------------------------
.. ARTICLE CONTENT
.. ---------------------------------------------------------------

=======================================
Quick Start: BSON Data Types - ObjectId
=======================================

.. introduction::

   .. image:: /images/qs-badges/qs-badge-bson.png
      :alt: BSON Quickstart badge
      :scale: 50%
      :align: right

   In the database world, it is frequently important to have unique
   identifiers associated with a record. In a legacy, tabular database,
   these unique identifiers are often used as primary keys. In a modern
   database, such as MongoDB, we need a unique identifier in an ``_id``
   field as a primary key as well. MongoDB provides an automatic unique
   identifier for the ``_id`` field in the form of an ``ObjectId`` data
   type.

   For those that are familiar with MongoDB
   `Documents <https://alger.me/mongodb-documents>`_ you've likely come
   across the ``ObjectId`` data type in the ``_id`` field. For those
   unfamiliar with MongoDB Documents, the
   `ObjectId <https://alger.me/mongodb-objectid>`_ datatype is
   automatically generated as a unique document identifier if no other
   identifier is provided. But what is an ``ObjectId`` field? What makes
   them unique? This post will unveil some of the magic behind the BSON
   ObjectId data type. First, though, what is BSON?

.. content::

   Binary JSON (BSON)
   ------------------

   Many programming languages have JavaScript Object Notation (JSON)
   support or similar data structures. MongoDB uses JSON documents to store
   records. However, behind the scenes, MongoDB represents these documents
   in a binary-encoded format called `BSON <http://bsonspec.org/>`_. BSON
   provides additional data types and ordered fields to allow for efficient
   support across a variety of languages. One of these additional data
   types is ObjectId.

   Makeup of an ObjectId
   ---------------------

   Let's start with an examination of what goes into an ObjectId. If we
   take a look at the construction of the ObjectId value, in its current
   implementation, it is a 12-byte hexadecimal value. This 12-byte
   configuration is smaller than a typical `universally unique
   identifier <https://alger.me/uuid-defined>`_ (UUID), which is,
   typically, 128-bits. Beginning in MongoDB 3.4, an ObjectId consists of
   the following values:

   -  4-byte value representing the seconds since the `Unix
      epoch <https://en.wikipedia.org/wiki/Unix_time>`_,
   -  5-byte random value, and
   -  3-byte counter, starting with a random value.

   .. image:: /images/objectid.png
      :alt: BSON ObjectId diagram

   With this makeup, ObjectIds are *likely* to be globally unique and
   unique per collection. Therefore, they make a good candidate for the
   unique requirement of the ``_id`` field. While the ``_id`` in a
   collection can be an auto-assigned ``ObjectId``, it can be user-defined
   as well, as long as it is unique within a collection. Remember that if
   you aren't using a MongoDB generated ``ObjectId`` for the ``_id`` field,
   the application creating the document will have to ensure the value is
   unique.

   History of ObjectId
   -------------------

   The makeup of the ObjectId has changed over time. Through version 3.2,
   it consisted of the following values:

   -  4-byte value representing the seconds since the Unix epoch,
   -  3-byte machine identifier,
   -  2-byte process id, and
   -  3-byte counter, starting with a random value.

   The change from including a machine-specific identifier and process id
   to a random value increased the likelihood that the ``ObjectId`` would
   be globally unique. These machine-specific 5-bytes of information became
   less likely to be random with the prevalence of Virtual Machines (VMs)
   that had the same MAC addresses and processes that started in the same
   order. While it still isn't guaranteed, removing machine-specific
   information from the ``ObjectId`` increases the chances that the same
   machine won't generate the same ``ObjectId``.

   ObjectId Odds of Uniqueness
   ---------------------------

   The randomness of the last eight bytes in the current implementation
   makes the likelihood of the same ObjectId being created pretty small.
   How small depends on the number of inserts per second that your
   application does. Let's do some quick math and look at the odds.

   If we do one insert per second, the first four bytes of the ObjectId
   would change so we can't have a duplicate ObjectId. What are the odds
   though when multiple documents are inserted in the same second that
   *two* ObjectIds are the same? Since there are *eight* bits in a byte,
   and *eight* random bytes in our Object Id (5 random + 3 random starting
   values), the denominator in our odds ratio would be 2^(8*8), or
   1.84467441x10'^19. For those that have forgotten scientific notation,
   that's 18,446,744,100,000,000,000. Yes, that's correct, 18 quintillion
   and change. As a bit of perspective, the odds of being struck by
   lightning in the U.S. in a given year are 1 in 700,000, according to
   `National
   Geographic <https://www.nationalgeographic.com/news/2005/6/flash-facts-about-lightning/>`_.
   The odds of winning the `Powerball
   Lottery <https://www.powerball.com/games/home>`_ jackpot are 1 in
   292,201,338. The numerator in our odds equation is the number of
   documents per second. Even in a write-heavy system with 250 million
   writes/second, the odds are, while not zero, pretty good against
   duplicate ObjectIds being generated.

.. summary::

   Wrap Up
   -------

   .. blockquote::

      Get started exploring BSON types, like ObjectId, with `MongoDB
      Atlas <https://www.mongodb.com/cloud/atlas>`_ today!

   ObjectId is one data type that is part of the `BSON
   Specification <http://bsonspec.org/>`_ that MongoDB uses for data
   storage. It is a binary representation of JSON and includes `other data
   types <https://www.mongodb.com/blog/post/the-top-12-bson-data-types-you-wont-find-in-json>`_
   beyond those defined in JSON. It is a powerful data type that is
   incredibly useful as a unique identifier in MongoDB Documents.

   Learn about different BSON data types in other articles in this Quick
   Start series:

   - :doc:`/quickstart/bson-data-types-decimal128`
